#!/bin/bash
###############################################################################
## Pode ser obtido pelo bash: wget blog.gustavovalerio.com.br/DebianKDE      ##
## Script hospedado no Github: github.com/valeriogustavo                     ##
## Scrip de instalação do KDE Plasma Desktop Mínimo                          ##
## A partir do Debian Testing Netboot Básico.                                ##
## Escrito por Gustavo Valério Ferreira                                      ##
## gustavovalerio.com.br                                                     ##
## 29/7/2021 - V 0.2.1                                                       ##
###############################################################################

### Variáveis
readonly write='printf' # facilita o entendimento
readonly return='printf' # retorno das funções amigáveis

function detect(){
    case "$1" in
        cpu)
            local -r AMD=$(grep -i 'amd' /proc/cpuinfo | wc -l)
            local -r INTEL=$(grep -i 'intel' /proc/cpuinfo | wc -l)
            
            if   [[ $AMD -gt 0 ]]; then
                $return 'AMD'
            elif [[ $INTEL -gt 0 ]]; then
                $return 'Intel'
            fi ;;

        gpu)
            lspci -nn | egrep -i "3d|display|vga" > gpu.info
            local -r INTEL=$(grep -i 'intel' gpu.info | wc -l)
            local -r NVIDIA=$(grep -i 'nvidia' gpu.info | wc -l)
            local -r AMD=$(egrep -i "amd|radeon" gpu.info | wc -l)
            rm -f gpu.info
                
            if   [[ $AMD -gt 0 ]]; then
                $return 'AMD'
            elif [[ $INTEL -gt 0 ]]; then
                $return 'Intel'
            elif [[ $NVIDIA -gt 0 ]]; then
                $return 'Nvidia'
            fi ;;
    esac
    
}

function install(){
    apt install -y --no-install-recommends $*    
}

function clean(){
    sed 's|^[ \t]*||;/./,$!d' $1
}

function set_print(){
    test -z $1 && return 255

    local -r PRINT="${1,,}"
    
    install print-manager cups system-config-printer-{common,udev}
    
    case "$PRINT" in
        'hp')
            install hplip{,-gui} printer-driver-{hp{ijs,cups},postscript-hp,pxljr} ;;
        
        'pdf')
            install printer-driver-cups-pdf ;;
        
        'epson')
            install printer-driver-escpr
            
            wget -c https://download2.ebz.epson.net/epsonscan2/common/deb/x64/epsonscan2-bundle-6.6.2.1.x86_64.deb.tar.gz -O epsonscan2.tar.gz
            
            if [[ -e './epsonscan2.tar.gz' ]]; then
                tar -zxf ./epsonscan2.tar.gz
                ./epsonscan2-bundle-*.deb/install.sh
                apt install -f -y
                
                local -r EPSON='/usr/share/applications/epsonscan2.desktop'
                if [[ -e "$EPSON" ]]; then
                    sed -i 's/Epson Scan 2/Digitalizar/g' "$EPSON"
                    sed -i "s/Icon=.*$/Icon=skanlite/g" "$EPSON"
                    
                    rm -rf ./epsonscan2{.tar.gz,-*/}
                fi
            fi ;;
        
        'cannon')
            install cups-backend-bjnp printer-driver-cjet ;;
       
        * | 'all')
            set_print hp
            set_print pdf
            set_print epson
            set_print cannon
            install printer-driver-all skanlite sane{,-utils}            
            ;;
    esac
    
}

function get_keys(){
    local -r GET="wget -qO -"
    local -r KEY="apt-key add -"

    install wget gnupg ca-certificates
    
    $GET https://dl.xanmod.org/gpg.key | $KEY
    $GET https://dl.google.com/linux/linux_signing_key.pub | $KEY
    $GET https://download.opensuse.org/repositories/home:/npreining:/debian-kde:/frameworks/Debian_Testing/Release.key | $KEY
   
}

function get_apps(){
    install linux-xanmod-edge
    install appmenu-gtk{2,3}-module
    install papirus-icon-theme vlc{,-l10n}
    install gstreamer1.0-plugins-{bad,good,ugly}
    install firefox{,-l10n-pt-br} google-chrome-stable
    install gimp{,-gmic,-data-extras,-plugin-registry} inkscape
    install libreoffice-{style-sifr,calc,writer,{l10n,lightproof}-pt-br,{kf,qt}5}
    
}

function set_grub(){
    # Configurando a inicialização silenciosa
    # e desabilitando as correções que deixam o sistema lento.
    # Caso queira as correções ativas, remova o "mitigations=off".

    mv -v /etc/default/grub{,.orig}

    $write '
        GRUB_DEFAULT=0
        GRUB_TIMEOUT=1
        GRUB_CMDLINE_LINUX_DEFAULT="quiet splash=silent"
        GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
        GRUB_CMDLINE_LINUX="mitigations=off nowatchdog loglevel=3 vga=current systemd.show_status=false rd.udev.log_priority=3 libahci.ignore_sss=1"
    ' | clean > /etc/default/grub
    
    $write '#KERNEL\nkernel.printk = 3 3 3 3\n\n' > /etc/sysctl.d/99-z-personal.conf 
}

function lock_apps(){
    # Impede instalação do Plymouth
    # Plymouth pode ser belo, mas atrasa o boot.
    $write '
        Package: plymouth*
        Pin: release *
        Pin-Priority: -1
    ' | clean > /etc/apt/preferences.d/01-plymouth

    # Impede instalação do Packagekit
    # Não gosto dele, a implementação promete
    # no entanto, acho que praticamente não há uso.
    $write '
        Package: packagekit*
        Pin: release *
        Pin-Priority: -1
    ' | clean > /etc/apt/preferences.d/02-packagekit

    ######################################
    # Bloqueando pacotes não-nativos     #
    # Não gosto de Snaps ou Flatpaks.    #
    ######################################

    # Impede instalação de softwares Snaps
    # Se usa ou quer usar snaps, comente o código.
    $write '
        Package: snapd*
        Pin: release *
        Pin-Priority: -1
    ' | clean > /etc/apt/preferences.d/03-snap

    # Impede instalação de softwares Flatpaks
    # Se usa ou quer usar flatpaks, comente o código.
    $write '
        Package: flatpak*
        Pin: release *
        Pin-Priority: -1
    ' | clean > /etc/apt/preferences.d/04-flatpak

    # Impede instalação de softwares que tragam
    # a base gnome como dependência (evita bagunça)
    $write '
        Package: gnome*
        Pin: release *
        Pin-Priority: -1
    ' | clean > /etc/apt/preferences.d/05-gnome

    # Impede instalação do Akonadi
    # Isso também impede a instalação
    # De softwares que dependem dele. São um peso!
    $write '
        Package: akonadi*
        Pin: release *
        Pin-Priority: -1
    ' | clean > /etc/apt/preferences.d/06-akonadi

    # Diminuímos a prioridade
    # de todos os pacotes instáveis.
    $write '
        Package: *
        Pin: release a=unstable
        Pin-Priority: 2
    ' | clean > /etc/apt/preferences.d/07-unstable
    
    # Por padrão, o repositório Experimental
    # tem prioridade 1 no APT, definiremos novamente
    # Apenas por questões de segurança e padronização de configurações.
    $write '
        Package: *
        Pin: release a=experimental
        Pin-Priority: 1
    ' | clean > /etc/apt/preferences.d/08-experimental

    # Configurando alguns pacotes para serem atualizados
    # pela versão mais recente via Unstable ou Experimental.
    $write '
        Package: libreoffice*
        Pin: release a=unstable
        Pin-Priority: 500

        Package: firefox*
        Pin: release o=Debian
        Pin-Priority: 500

        Package: *-icon-theme*
        Pin: release o=Debian
        Pin-Priority: 500
    ' | clean > /etc/apt/preferences.d/09-softwares

    # Desativamos o autoupdate
    # E aumentamos o cache do apt.
    $write '
        APT::Periodic::Enable "0";
        APT::Cache-Limit "100000000";
        APT::Periodic::Unattended-Upgrade "0";
        APT::Periodic::Update-Package-Lists "0";
    ' | clean > /etc/apt/apt.conf.d/99-z-apt
}

function set_repos(){
    rm -f /etc/apt/sources.list
    
    $write '
        deb [arch=amd64] http://deb.xanmod.org releases main
    ' | clean > /etc/apt/sources.list.d/xanmod-kernel.list
    
    $write '
        deb [arch=amd64] https://dl.google.com/linux/chrome/deb stable main
    ' | clean > /etc/apt/sources.list.d/google-chrome.list

    $write '
        deb [arch=amd64] http://deb.debian.org/debian testing main contrib non-free
    ' | clean > /etc/apt/sources.list.d/testing-all.list

    $write '
        deb [arch=amd64] http://deb.debian.org/debian unstable main contrib non-free
    ' | clean > /etc/apt/sources.list.d/unstable-all.list

    $write '
        deb [arch=amd64] http://deb.debian.org/debian experimental main contrib non-free
    ' | clean > /etc/apt/sources.list.d/experimental-all.list
    
    $write '
        deb [arch=amd64] http://security.debian.org/debian-security testing-security main contrib non-free
    ' | clean > /etc/apt/sources.list.d/testing-security.list
    
    $write '
        deb https://download.opensuse.org/repositories/home:/npreining:/debian-kde:/frameworks/Debian_Testing/ ./
        deb https://download.opensuse.org/repositories/home:/npreining:/debian-kde:/plasma522/Debian_Testing/ ./
        deb https://download.opensuse.org/repositories/home:/npreining:/debian-kde:/apps2104/Debian_Testing/ ./
        deb https://download.opensuse.org/repositories/home:/npreining:/debian-kde:/other/Debian_Testing/ ./

    ' | clean > /etc/apt/sources.list.d/npreining.list
}

function clean_system(){
    apt clean
    apt autoclean -y
    apt autoremove --purge -y
}

function system_upgrade(){
    apt -qq update
    apt full-upgrade -y
}

function get_essentials(){
    local -r CPU=$(detect cpu)
    local -r GPU=$(detect gpu)
    
    if   [[ "$CPU" == "AMD" ]]; then
        install amd64-microcode
    elif [[ "$CPU" == "Intel" ]]; then
        install intel-{microcode,opencl-icd} iucode-tool
    fi

    
    if   [[ "$GPU" == "AMD" ]]; then
        install xserver-xorg-video-{amdgpu,ati,radeon} firmware-amd-graphics
    elif [[ "$GPU" == "Intel" ]]; then
        install xserver-xorg-video-intel mesa-utils
    elif [[ "$GPU" == "Nvidia" ]]; then
        install nvidia-{detect,driver}
    else
        install xserver-xorg-video-all
    fi
    
    install pulseaudio{,-utils,-module-gsettings} nano x{init,auth,server-xorg-core} irqbalance ufw thermald python-is-python3
}

function optimize_system(){
    local -r SYSCTL='/etc/sysctl.d/99-z-personal.conf'
    local -r DISK_TYPE=$(cat /sys/block/sda/queue/rotational)
    local -r MEM=$(awk '/MemTotal:/ { printf "%0.f",$2/1000/1000 }' /proc/meminfo)

    # Desativando e mascarando serviços desnecessários
    systemctl disable --now apt-daily{,-upgrade}{.service,.timer} NetworkManager-wait-online.service
    systemctl mask apt-daily{,-upgrade}{.service,.timer} NetworkManager-wait-online.service 
    # Systemd às vezes não inicia o UFW
    systemctl enable ufw && ufw enable
    
    wget http://ftp.br.debian.org/debian/pool/main/p/prelink/prelink_0.0.20131005-1+b10_amd64.deb
    wget http://ftp.br.debian.org/debian/pool/main/p/prelink/execstack_0.0.20131005-1+b10_amd64.deb
    
    if [[ -e './prelink_0.0.20131005-1+b10_amd64.deb' ]]; then
        if [[ -e './execstack_0.0.20131005-1+b10_amd64.deb' ]]; then
            dpkg -i *.deb
            apt install -f
            
            rm prelink_0.0.20131005-1+b10_amd64.deb
            rm execstack_0.0.20131005-1+b10_amd64.deb
            
            
            sed -i 's/PRELINKING=unknown/PRELINKING=yes/g'  /etc/default/prelink
    
            # Avisando ao KDE que ele está prelinkado
            $write 'export KDE_IS_PRELINKED=1' > /etc/profile.d/kde-prelink.sh
            chmod +x /etc/profile.d/kde-prelink.sh

            # Configurando o DPKG para executar o Prelink
            # Sempre que houver remoção ou instalação de pacotes
            $write '
                DPkg::Post-Invoke {"sleep 2;/usr/sbin/prelink -amR";}
                ' | clean > /etc/apt/apt.conf.d/10-prelink
        fi
    fi

    install preload
    
    # Liberando portas para o KDE Connect
    ufw allow 1714:1764/tcp
    ufw allow 1714:1764/udp

    # Configurando o Preload e o Libreoffice
    sed -i 's/memfree = 50/memfree = 100/g'         /etc/preload.conf
    sed -i 's/memcached = 0/memcached = 30/g'       /etc/preload.conf
    sed -i 's/processes = 30/processes = 60/g'      /etc/preload.conf
    sed -i 's/Logo=1/Logo=0/g'                      /etc/libreoffice/sofficerc
    
    # Seta lz4 para decompactar o kernel (boot +rápido)
    install lz4 liblz4-1
    sed -i 's/COMPRESS=gzip/COMPRESS=lz4/g' /etc/initramfs-tools/initramfs.conf

    $write '
        #CORE
        net.core.default_qdisc = cake
        net.core.netdev_max_backlog = 16384
        net.core.optmem_max = 65536
        net.core.rmem_default = 1048576
        net.core.rmem_max = 16777216
        net.core.somaxconn = 8192
        net.core.wmem_default = 1048576
        net.core.wmem_max = 16777216
        
        #IPV4
        net.ipv4.conf.all.accept_redirects = 0
        net.ipv4.conf.all.log_martians = 1
        net.ipv4.conf.all.secure_redirects = 0
        net.ipv4.conf.all.send_redirects = 0
        net.ipv4.conf.default.accept_redirects = 0
        net.ipv4.conf.default.log_martians = 1
        net.ipv4.conf.default.rp_filter = 0
        net.ipv4.conf.default.secure_redirects = 0
        net.ipv4.conf.default.send_redirects = 0
        net.ipv4.icmp_echo_ignore_all = 1
        net.ipv4.ip_local_port_range = 1024 65535
        net.ipv4.tcp_congestion_control = bbr
        net.ipv4.tcp_fastopen = 3
        net.ipv4.tcp_fin_timeout = 10
        net.ipv4.tcp_keepalive_intvl = 10
        net.ipv4.tcp_keepalive_probes = 6
        net.ipv4.tcp_keepalive_time = 60
        net.ipv4.tcp_max_syn_backlog = 8192
        net.ipv4.tcp_max_tw_buckets = 2000000
        net.ipv4.tcp_mtu_probing = 1
        net.ipv4.tcp_rfc1337 = 1
        net.ipv4.tcp_rmem = 4096 1048576 2097152
        net.ipv4.tcp_slow_start_after_idle = 0
        net.ipv4.tcp_synack_retries = 3
        net.ipv4.tcp_syncookies = 0
        net.ipv4.tcp_syn_retries = 3
        net.ipv4.tcp_timestamps = 1
        net.ipv4.tcp_tw_reuse = 1
        net.ipv4.tcp_window_scaling = 1
        net.ipv4.tcp_wmem = 4096 65536 16777216
        net.ipv4.udp_rmem_min = 8192
        net.ipv4.udp_wmem_min = 8192
        
        #VM
        vm.vfs_cache_pressure = 50
    ' | clean >> $SYSCTL

    
    if [[ $MEM -le 2 ]]; then
        $write 'vm.swappiness = 10\n' >> $SYSCTL
    elif [[ $MEM -le 4 ]]; then
        $write 'vm.swappiness = 5\n' >> $SYSCTL
    elif [[ $MEM -le 8 ]]; then
        $write 'vm.swappiness = 3\n' >> $SYSCTL
    elif [[ $MEM -le 12 ]]; then
        $write 'vm.swappiness = 2\n' >> $SYSCTL
    elif [[ $MEM -le 16 ]]; then
        $write 'vm.swappiness = 1\n' >> $SYSCTL
    else
        # Desabilita o uso da swap
        # Em sistemas com mais de 16Gb de RAM.
        $write 'vm.swappiness = 0\n' >> $SYSCTL
    fi


    if [[ $DISK_TYPE -eq 0 ]]; then
        $write '
            vm.dirty_background_ratio = 3
            vm.dirty_ratio = 5
        ' | clean >> $SYSCTL

        # O Debian ativa o trim automaticamente,
        # Mas, por garantia, melhor habilitar manualmente.
        systemctl enable fstrim.timer
    else
        $write '
            vm.dirty_background_ratio = 5
            vm.dirty_ratio = 15
        ' | clean >> $SYSCTL
    fi
    
    # Executamos o Prelink com a opção -R ativa
    # Isso ramdomiza os binários e melhora a segurança.
    prelink -amvR
    
    # Corrige o problema de rede não gerenciável
    mv /etc/network/interfaces{,.orig}
    
    # Habilita um RAMDISK, melhora o desempenho do sistema.
    cp /usr/share/systemd/tmp.mount /etc/systemd/system/
    systemctl enable tmp.mount
    
    local -r GIMP='/usr/share/applications/gimp.desktop'
    if [[ -e "$GIMP" ]]; then
        sed -i 's/GNU Image Manipulation Program/Gimp/g' "$GIMP"
        sed -i 's/Programa de Manipulação de Imagens GNU/Gimp/g' "$GIMP"
        sed -i 's/Programa de manipulação de imagem do GNU/Gimp/g' "$GIMP"
    fi
    
    local -r VLC='/usr/share/applications/vlc.desktop'
    if [[ -e "$VLC" ]]; then
        sed -i 's/VLC media player/VLC/g' "$VLC"
        sed -i 's/Reprodutor de Mídias VLC/VLC/g' "$VLC"
    fi
}

function get_plasma_desktop(){
    install plasma-{nm,pa,{browser-,}integration,framework,firewall,workspace{,-wayland},desktop,widgets-addons}
    install kde-{spectacle,config-{sddm,screenlocker,gtk-style{,-preview}}} frei0r-plugins sddm
    install k{init,ate,onsole,win-x11,sysguard,screen,hotkeys,dialog,id3-qt} ark
    install k{menuedit,deconnect,infocenter,torrent,denlive,calc,rename}
    install po{werdevil,lkit-kde-agent-1} dolphin{,-plugins} gwenview
    install qml-module-org-kde-{kcm,newstuff} elisa librsvg2-common
    install kio-extras ffmpegthumbs kwalletmanager systemsettings
    install breeze{,-gtk-theme} gtk3-engines-breeze okular
}

if [[ "$1" == "exec" ]] && [[ $UID -eq 0 ]]; then
    apt -qq update
    apt purge vim-{tiny,common} -y

    set_grub
    get_keys
    set_repos
    lock_apps
    clean_system
    system_upgrade
    get_essentials
    get_plasma_desktop
    
    # Defina a marca de sua impressora
    # ou mantenha 'all' para adicionar suporte
    # para todas as impressoras suportadas pelo Debian.
    # set_print epson -> para instalar suporte para EPSON e etc.
    set_print epson
    
    get_apps
    clean_system
    optimize_system
    
    update-grub
    update-initramfs -c -k all
 
    sleep 10
    #Desabilita a decoração da janela quando maximizada
    #kwriteconfig5 --file ~/.config/kwinrc --group Windows --key BorderlessMaximizedWindows true
    systemctl reboot
elif [[ $UID -eq 0 ]]; then
    # Corrige o timeout do sudo.
    # Se a conexão do usuário for lenta,
    # o script demorará mais que o tempo permitido
    # para a execução do SUDO. Para evitar o timeout,
    # chamamos o script novamente mudando os poderes do sudo.
    sudo su -c "$0 exec"
else
    printf 'Precisa ser root!\n'
    exit 255
fi
